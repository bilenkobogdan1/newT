// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notes.Aplication.EF;

#nullable disable

namespace Notes.Aplication.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Enterprises.Domain.Entities.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductKmat")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductKmat");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Notes.Domain.Entities.HistoryMstock", b =>
                {
                    b.Property<Guid>("idHitory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date_d")
                        .HasColumnType("datetime2");

                    b.Property<int>("action")
                        .HasColumnType("int");

                    b.Property<string>("productKmat")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("storeIdStore")
                        .HasColumnType("int");

                    b.HasKey("idHitory");

                    b.HasIndex("productKmat");

                    b.HasIndex("storeIdStore");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Notes.Domain.Entities.Mstock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductKmat")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quentity")
                        .HasColumnType("int");

                    b.Property<int>("StoreIdStore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductKmat");

                    b.HasIndex("StoreIdStore");

                    b.ToTable("Mstocks");
                });

            modelBuilder.Entity("Notes.Domain.Entities.Product", b =>
                {
                    b.Property<string>("Kmat")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Articule")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Kmat");

                    b.HasIndex("Articule")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Notes.Domain.Entities.Store", b =>
                {
                    b.Property<int>("IdStore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStore"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStore");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Enterprises.Domain.Entities.Price", b =>
                {
                    b.HasOne("Notes.Domain.Entities.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductKmat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Notes.Domain.Entities.HistoryMstock", b =>
                {
                    b.HasOne("Notes.Domain.Entities.Product", "product")
                        .WithMany()
                        .HasForeignKey("productKmat");

                    b.HasOne("Notes.Domain.Entities.Store", "store")
                        .WithMany()
                        .HasForeignKey("storeIdStore");

                    b.Navigation("product");

                    b.Navigation("store");
                });

            modelBuilder.Entity("Notes.Domain.Entities.Mstock", b =>
                {
                    b.HasOne("Notes.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductKmat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notes.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreIdStore")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Notes.Domain.Entities.Product", b =>
                {
                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
